#!/bin/sh
. ./config
for arg in "$@"; do
	eval "$(echo $arg | cut -d= -f1)='$(echo $arg | cut -d= -f2-)'"
done

exec 3>Makefile.real
printf '# Generated by depend\n' >&3
printf '\n' >&3
printf 'default: all\n' >&3
printf '\n' >&3

# $1 - target
# $2 - dependencies separated with whitespace.
# $3 - commands. lines starting with a tab each like in a makefile.
rule() {
	if ! printf '%s' "$3" | cmp -s $1.cmd -; then
		printf '%s' "$3" > $1.cmd
	fi
	printf '%s: %s %s\n' "$1" "$1.cmd" "$2" >&3
	printf '%s' "$3" >&3
	printf '\n' >&3
}

# Make phony targets for deps specified in $1. That way their absence won't
# cause a build error. $1 can contain lone backslashes as cc -M outputs.
phony() {
	for i in `echo "$1" | tr \\\\\\\\ ' '`; do
		printf "%s:\n\n" "$i" >&3
	done
}

# $1 - c source file relative to $SRC, $2 - flags
compile() {
	F=${1%.c}
	D=$(cat $F.d 2>/dev/null)
	D=${D#*:}
	phony "$D"
	rule $F.o "$SRC/$F.c $D" \
"	$CC $CFLAGS $2 -c -o $F.o $SRC/$F.c
	$CC $CFLAGS $2 -M $SRC/$F.c > $F.d
"
}

# $1 - target, $2 - deps, $3 - flags
link_program() {
	rule $1 "$2" \
"	$CC $3 $LDFLAGS -o $1 $2
"
}

OBJ=''
for i in $SRC/*.c; do
	f=${i#$SRC/}
	compile $f "$cflags"
	OBJ="$OBJ ${f%.c}.o"
done

link_program xsubsession "$OBJ" "$ldflags"

printf 'install:\n' >&3
printf '\tinstall xsubsession %s/bin\n' "$prefix" >&3
printf '\n' >&3
printf 'uninstall:\n' >&3
printf '\trm %s/bin/xsubsession\n' "$prefix" >&3
printf '\n' >&3
printf 'all: xsubsession\n' >&3
printf '\n' >&3
exec 3>&-
